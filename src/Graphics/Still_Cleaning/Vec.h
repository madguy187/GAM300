/**********************************************************************************
* \file            Vec.cpp
*
* \brief        Definition of the Vec3 and Vec4 class function(s).
*
* \author        Tian Yu
*
* \email		t.yu\@digipen.edu
*
* \date			1 aug 2020
*
* \copyright    Copyright (c) 2020 DigiPen Institute of Technology. Reproduction
*                or disclosure of this file or its contents without the prior
*                written consent of DigiPen Institute of Technology is prohibited.
**********************************************************************************/
#ifndef VEC_H
#define VEC_H
#include <iostream>


//find the min value 
inline float min(float lhs, float rhs)
{
	return (lhs < rhs) ? lhs : rhs;
}

//find the max value 
inline float max(float lhs, float rhs)
{
	return (lhs > rhs) ? lhs : rhs;
}

////////////////////////////////////////////////////////////////////////
///
///                 VEC2 DEFINITIONS AND FUNCTIONS -START
///
//////////////////////////////////////////////////////////////////////

//define the vectors 
class vec2
{
public:

	float x, y;

	/**************************************************************************/
	/*!
		//Constructor (default)
	*/
	/**************************************************************************/
	vec2()
	{
		x = 0;
		y = 0;
	};

	/**************************************************************************/
	/*!
		//Constructor (overloaded)
	*/
	/**************************************************************************/
	vec2(float _x, float _y)
	{
		x = _x;
		y = _y;
	};

	/**************************************************************************/
	/*!
		//assignment +=
	*/
	/**************************************************************************/
	vec2& operator +=(const vec2& rhs)
	{
		//overloading operator +=
		*this = *this + rhs;
		return *this;
	}

	/**************************************************************************/
	/*!
		//assignment -=
	*/
	/**************************************************************************/
	vec2& operator -= (const  vec2& rhs)
	{
		//overloading operator -=
		*this = *this - rhs;
		return *this;
	}

	/**************************************************************************/
	/*!
		//assignment *=
	*/
	/**************************************************************************/
	vec2& operator *= (float rhs)
	{

		//overloading operator *=
		*this = *this * rhs;

		return *this;
	}

	/**************************************************************************/
	/*!
		//assignment /=
	*/
	/**************************************************************************/
	vec2& operator /= (float rhs)
	{

		//overloading operator /=
		*this = *this / rhs;
		return *this;
	}

	/**************************************************************************/
	/*!
		//unary operator
	*/
	/**************************************************************************/
	vec2  operator -() const
	{
		//overloading operator -
		vec2 temp = { -this->x,-this->y };
		return temp;
	}

	/**************************************************************************/
	/*!
		//binary operator +
	*/
	/**************************************************************************/
	vec2 operator + (const vec2& rhs)
	{

		vec2 temp = { this->x + rhs.x,this->y + rhs.y };

		return temp;
	}

	/**************************************************************************/
	/*!
		//binary operator -
	*/
	/**************************************************************************/
	vec2 operator - (const vec2& rhs)
	{
		vec2 temp = { this->x - rhs.x,this->y - rhs.y };

		return temp;
	}

	/**************************************************************************/
	/*!
		//binary operator * vec2 and vec2
	*/
	/**************************************************************************/
	vec2 operator * (const vec2& rhs)
	{
		vec2 temp = { this->x * rhs.x,this->y * rhs.y };

		return temp;
	}

	/**************************************************************************/
	/*!
		//binary operator * vec2 and float
	*/
	/**************************************************************************/
	vec2 operator * (float rhs)
	{
		vec2 temp = { this->x * rhs,this->y * rhs };

		return temp;
	}

	/**************************************************************************/
	/*!
		//binary operator /
	*/
	/**************************************************************************/
	vec2 operator / (float rhs)
	{
		vec2 temp = { this->x / rhs,this->y / rhs };

		return temp;
	}
#if 1
	friend std::ostream& operator<<(std::ostream& output, const vec2& input)
	{
		output << input.x;
		output << ",";
		output << input.y;
		output << std::endl;
		return output;
	}
#endif
};
/**************************************************************************/
/*!
	Result will be the unit vector of vec0
	Normalize vector
*/
/**************************************************************************/
void Vec2_Normalize(vec2& Result, const vec2& Vec0);

/**************************************************************************/
/*!
	Find the length of vector vec0
*/
/**************************************************************************/
float Vec2_Length(const vec2& Vec0);

/**************************************************************************/
/*!
	Find the square length of the vector vec0
*/
/**************************************************************************/
float Vec2_SquareLength(const vec2& Vec0);

/**************************************************************************/
/*!
	Find the distance of 2 vectors
*/
/**************************************************************************/
float Vec2_Distance(const vec2& Vec0, const vec2& Vec1);

/**************************************************************************/
/*!
	Find the square distance of 2 vectors
*/
/**************************************************************************/
float Vec2_SquareDistance(const vec2& Vec0, const vec2& Vec1);

/**************************************************************************/
/*!
	Find dot product of 2 vectors
*/
/**************************************************************************/
float Vec2_DotProduct(const vec2& Vec0, const vec2& Vec1);

/**************************************************************************/
/*!
	Find cross product of 2 vectors magnitude
*/
/**************************************************************************/
float Vec2_CrossProductMag(const vec2& Vec0, const vec2& Vec1);

/**************************************************************************/
/*!
	Find min between the 2 vectors
*/
/**************************************************************************/
vec2 Vec2_allmin(vec2 lhs, vec2 rhs);

/**************************************************************************/
/*!
	Find max between the 2 vectors
*/
/**************************************************************************/
vec2 Vec2_allmax(vec2 lhs, vec2 rhs);


////////////////////////////////////////////////////////////////////////
///
///                  VEC2 DEFINITIONS AND FUNCTIONS -END
///
//////////////////////////////////////////////////////////////////////





////////////////////////////////////////////////////////////////////////
///
///                 VEC3 DEFINITIONS AND FUNCTIONS -START
///
//////////////////////////////////////////////////////////////////////
//define the vectors 
class vec3
{
public:

	float x, y, z;

	/**************************************************************************/
	/*!
		//Constructor (default)
	*/
	/**************************************************************************/
	vec3()
	{
		x = 0;
		y = 0;
		z = 0;
	}

	/**************************************************************************/
	/*!
		//Constructor (overloaded)
	*/
	/**************************************************************************/
	vec3(float _x, float _y, float _z)
	{
		x = _x;
		y = _y;
		z = _z;
	}

	/**************************************************************************/
	/*!
		//Constructor (overloaded)
	*/
	/**************************************************************************/
	vec3(const vec3& copy)
	{
		set(copy);
	}

	/**************************************************************************/
	/*!
		//Constructor (overloaded)
	*/
	/**************************************************************************/
	vec3(const float* array)
	{
		set(array);
	}

	/**************************************************************************/
	/*!
		//Constructor (overloaded)
	*/
	/**************************************************************************/
	vec3(const vec3& p1, const vec3& p2)
	{
		set(p1, p2);
	}

	/**************************************************************************/
	/*!
		//assignment +=
	*/
	/**************************************************************************/
	vec3& operator +=(const vec3& rhs)
	{
		//overloading operator +=
		*this = *this + rhs;
		return *this;
	}

	/**************************************************************************/
	/*!
		//assignment -=
	*/
	/**************************************************************************/
	vec3& operator -= (const  vec3& rhs)
	{
		//overloading operator -=
		*this = *this - rhs;
		return *this;
	}

	/**************************************************************************/
	/*!
		//assignment *=
	*/
	/**************************************************************************/
	vec3& operator *= (float rhs)
	{

		//overloading operator *=
		*this = *this * rhs;

		return *this;
	}

	/**************************************************************************/
	/*!
		//assignment /=
	*/
	/**************************************************************************/
	vec3& operator /= (float rhs)
	{

		//overloading operator /=
		*this = *this / rhs;
		return *this;
	}

	/**************************************************************************/
	/*!
		//unary operator
	*/
	/**************************************************************************/
	vec3  operator -() const
	{
		//overloading operator -
		vec3 temp = { -this->x,-this->y,-this->z };
		return temp;
	}

	/**************************************************************************/
	/*!
		//binary operator +
	*/
	/**************************************************************************/
	vec3 operator + (const vec3& rhs)
	{

		vec3 temp = { this->x + rhs.x,this->y + rhs.y ,this->z + rhs.z };

		return temp;
	}

	/**************************************************************************/
	/*!
		//binary operator -
	*/
	/**************************************************************************/
	vec3 operator - (const vec3& rhs)
	{
		vec3 temp = { this->x - rhs.x,this->y - rhs.y,this->z - rhs.z };

		return temp;
	}

	/**************************************************************************/
	/*!
		//binary operator * vec3 and vec3
	*/
	/**************************************************************************/
	vec3 operator * (const vec3& rhs)
	{
		vec3 temp = { this->x * rhs.x,this->y * rhs.y, this->z * rhs.z };

		return temp;
	}

	/**************************************************************************/
	/*!
		//binary operator * vec3and float
	*/
	/**************************************************************************/
	vec3 operator * (float rhs)
	{
		vec3 temp = { this->x * rhs,this->y * rhs,this->z * rhs };

		return temp;
	}

	/**************************************************************************/
	/*!
		//binary operator /
	*/
	/**************************************************************************/
	vec3 operator / (float rhs)
	{
		vec3 temp = { this->x / rhs,this->y / rhs,this->z / rhs };

		return temp;
	}

	/**************************************************************************/
	/*!
		Sets the elements of this vector to the specified values.
	*/
	/**************************************************************************/
	void set(float x, float y, float z);

	/**************************************************************************/
	/*!
		Sets the elements of this vector from the values in the specified array.
	*/
	/**************************************************************************/
	void set(const float* array);

	/**************************************************************************/
	/*!
		Sets the elements of this vector to those in the specified vector.
	*/
	/**************************************************************************/
	void set(const vec3& v);

	/**************************************************************************/
	/*!
		Sets this vector to the directional vector between the specified points.
	*/
	/**************************************************************************/
	void set(const vec3& p1, const vec3& p2);

	/**************************************************************************/
	/*!
		operator overload (for debug)
	*/
	/**************************************************************************/
	friend std::ostream& operator<<(std::ostream& output, const vec3& input)
	{
		output << input.x;
		output << ",";
		output << input.y;
		output << ",";
		output << input.z;
		output << std::endl;
		return output;
	}

};


/**************************************************************************/
/*!
	Find min between the 2 vectors
*/
/**************************************************************************/
vec3 Vec3_allmin(vec3 lhs, vec3 rhs);

/**************************************************************************/
/*!
	Find max between the 2 vectors
*/
/**************************************************************************/
vec3 Vec3_allmax(vec3 lhs, vec3 rhs);

/**************************************************************************/
/*!
	Result will be the unit vector of vec0
	Normalize vector
*/
/**************************************************************************/
void Vec3_Normalize(vec3& Result, const vec3& Vec0);

/**************************************************************************/
/*!
	Find the length of vector vec0
*/
/**************************************************************************/
float Vec3_Length(const vec3& Vec0);

/**************************************************************************/
/*!
	Find the square length of the vector vec0
*/
/**************************************************************************/
float Vec3_SquareLength(const vec3& Vec0);

/**************************************************************************/
/*!
	Find the distance of 2 vectors
*/
/**************************************************************************/
float Vec3_Distance(const vec3& Vec0, const vec3& Vec1);

/**************************************************************************/
/*!
	Find the square distance of 2 vectors
*/
/**************************************************************************/
float Vec3_SquareDistance(const vec3& Vec0, const vec3& Vec1);

/**************************************************************************/
/*!
	Find dot product of 2 vectors
*/
/**************************************************************************/
float Vec3_DotProduct(const vec3& Vec0, const vec3& Vec1);

/**************************************************************************/
/*!
	Find cross product of 2 vectors
*/
/**************************************************************************/
vec3 Vec3_CrossProduct(const vec3& Vec0, const vec3& Vec1);

/**************************************************************************/
/*!
	Find cross product of 2 vectors magnitude
*/
/**************************************************************************/
float Vec3_CrossProductMag(const vec3& Vec0, const vec3& Vec1);

/**************************************************************************/
/*!
	Create a color from a vector integer as RGB value
	Eg. Red = <1,0,0>
*/
/**************************************************************************/
 vec3 Vec3_FromColor(unsigned int color);

 // check if equal
 bool Vec3_IsEqual(const vec3& Vec1, const vec3& Vec0);

////////////////////////////////////////////////////////////////////////
///
///                  VEC3 DEFINITIONS AND FUNCTIONS -END
///
//////////////////////////////////////////////////////////////////////





//////////////////////////////////////////////////////////////////////////
/////
/////                 VEC4 DEFINITIONS AND FUNCTIONS -START
/////
////////////////////////////////////////////////////////////////////////
////define the vectors 
class vec4
{
public:

	float x, y, z, w;

	/**************************************************************************/
	/*!
		//Constructor (default)
	*/
	/**************************************************************************/
	vec4()
	{
		x = 0;
		y = 0;
		z = 0;
		w = 0;
	};

	/**************************************************************************/
	/*!
		//Constructor (overloaded)
	*/
	/**************************************************************************/
	vec4(float _x, float _y, float _z, float _w)
	{
		x = _x;
		y = _y;
		z = _z;
		w = _w;
	};

	/**************************************************************************/
/*!
	//Constructor (overloaded)
*/
/**************************************************************************/
 	vec4(const vec3& copy)
	{
		set(copy);
	}

	/**************************************************************************/
	/*!
		//Constructor (overloaded)
	*/
	/**************************************************************************/
	vec4(const float* array)
	{
		set(array);
	}

	/**************************************************************************/
	/*!
		//Constructor (overloaded)
	*/
	/**************************************************************************/
	vec4(const vec3& p1, const vec3& p2)
	{
		set(p1, p2);
	}


	/**************************************************************************/
	/*!
		//assignment +=
	*/
	/**************************************************************************/
	vec4& operator +=(const vec4& rhs)
	{
		//overloading operator +=
		*this = *this + rhs;
		return *this;
	}

	/**************************************************************************/
	/*!
		//assignment -=
	*/
	/**************************************************************************/
	vec4& operator -= (const  vec4& rhs)
	{
		//overloading operator -=
		*this = *this - rhs;
		return *this;
	}

	/**************************************************************************/
	/*!
		//assignment *=
	*/
	/**************************************************************************/
	vec4& operator *= (float rhs)
	{

		//overloading operator *=
		*this = *this * rhs;

		return *this;
	}

	/**************************************************************************/
	/*!
		//assignment /=
	*/
	/**************************************************************************/
	vec4& operator /= (float rhs)
	{

		//overloading operator /=
		*this = *this / rhs;
		return *this;
	}

	/**************************************************************************/
	/*!
		//unary operator
	*/
	/**************************************************************************/
	vec4  operator -() const
	{
		//overloading operator -
		vec4 temp = { -this->x,-this->y,-this->z, -this->w };
		return temp;
	}

	/**************************************************************************/
	/*!
		//binary operator +
	*/
	/**************************************************************************/
	vec4 operator + (const vec4& rhs)
	{

		vec4 temp = { this->x + rhs.x,this->y + rhs.y ,this->z + rhs.z, this->w + rhs.w };

		return temp;
	}

	/**************************************************************************/
	/*!
		//binary operator -
	*/
	/**************************************************************************/
	vec4 operator - (const vec4& rhs)
	{
		vec4 temp = { this->x - rhs.x,this->y - rhs.y,this->z - rhs.z,this->w - rhs.w };

		return temp;
	}

	/**************************************************************************/
	/*!
		//binary operator * vec4 and vec4
	*/
	/**************************************************************************/
	vec4 operator * (const vec4& rhs)
	{
		vec4 temp = { this->x * rhs.x,this->y * rhs.y, this->z * rhs.z, this->w * rhs.w };

		return temp;
	}

	/**************************************************************************/
	/*!
		//binary operator * vec4 and float
	*/
	/**************************************************************************/
	vec4 operator * (float rhs)
	{
		vec4 temp = { this->x * rhs,this->y * rhs,this->z * rhs, this->w * rhs };

		return temp;
	}

	/**************************************************************************/
	/*!
		//binary operator /
	*/
	/**************************************************************************/
	vec4 operator / (float rhs)
	{
		vec4 temp = { this->x / rhs,this->y / rhs,this->z / rhs, this->z / rhs };

		return temp;
	}
	/**************************************************************************/
	/*!
		overloading set function
	*/
	/**************************************************************************/

	/**************************************************************************/
	/*!
		operator overload (for debug)
	*/
	/**************************************************************************/
	friend std::ostream& operator<<(std::ostream& output, const vec4& input)
	{
		output << input.x;
		output << ",";
		output << input.y;
		output << ",";
		output << input.z;
		output << ",";
		output << input.w;
		output << std::endl;
		return output;
	}

	/**************************************************************************/
	/*!
		Sets the elements of this vector to the specified values.
	*/
	/**************************************************************************/
	void set(float x, float y, float z, float w);

	/**************************************************************************/
	/*!
		Sets the elements of this vector from the values in the specified array.
	*/
	/**************************************************************************/
	void set(const float* array);

	/**************************************************************************/
	/*!
		Sets the elements of this vector to those in the specified vector.
	*/
	/**************************************************************************/
	void set(const vec4& v);

	/**************************************************************************/
	/*!
		Sets this vector to the directional vector between the specified points.
	*/
	/**************************************************************************/
	void set(const vec4& p1, const vec4& p2);

};


/**************************************************************************/
/*!
	Find min between the 2 vectors
*/
/**************************************************************************/
vec4 allmin(vec4 lhs, vec4 rhs);

/**************************************************************************/
/*!
	Find max between the 2 vectors
*/
/**************************************************************************/
vec4 allmax(vec4 lhs, vec4 rhs);

/**************************************************************************/
/*!
	Result will be the unit vector of vec0
	Normalize vector
*/
/**************************************************************************/
void Vec4_Normalize(vec4& Result, const vec4& Vec0);

/**************************************************************************/
/*!
	Find the length of vector vec0
*/
/**************************************************************************/
float Vec4_Length(const vec4& Vec0);

/**************************************************************************/
/*!
	Find the square length of the vector vec0
*/
/**************************************************************************/
float Vec4_SquareLength(const vec4& Vec0);

/**************************************************************************/
/*!
	Find the distance of 2 vectors
*/
/**************************************************************************/
float Vec4_Distance(const vec4& Vec0, const vec4& Vec1);

/**************************************************************************/
/*!
	Find the square distance of 2 vectors
*/
/**************************************************************************/
float Vec4_SquareDistance(const vec4& Vec0, const vec4& Vec1);

/**************************************************************************/
/*!
	Find dot product of 2 vectors
*/
/**************************************************************************/
float Vec4_DotProduct(const vec4& Vec0, const vec4& Vec1);

/**************************************************************************/
/*!
	Create a color from a vector integer as RGB value
	Eg. Red = <1,0,0,1>
*/
/**************************************************************************/
 vec4 Vec4_FromColor(unsigned int color);

//////////////////////////////////////////////////////////////////////////
/////
/////                  VEC4 DEFINITIONS AND FUNCTIONS -END
/////
////////////////////////////////////////////////////////////////////////
#endif //VEC_H
